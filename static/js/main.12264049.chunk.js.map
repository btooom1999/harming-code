{"version":3,"sources":["ultis/Math.ts","models/Header/index.tsx","models/Sider/index.tsx","models/Breadcrumb/index.tsx","models/Footer/index.tsx","routes/Exercise/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["_math","calcCheckBit","dataBit","len","length","i","Math","pow","getArrayDataBit","arr","checkXORBit","bit","result","parseInt","get2ExponentNumber","number","getExponentNumber","exponent","getEquationResult","checkBit","getBinaryNumber","decimalNumber","toString","zero","getNumberArray","getBinaryNumberArray","getPositionNumber1","binaryNumber","checkPositionNumber1","position","getDataBitAndCheckBitArray","index","push","forEach","console","log","x","newArr","map","positionNumber1","n","positionBit","getXORValue","array","calcCheckBitArray","item","split","getFullBit","oddParityBits","parityBits","numBitInput","numParityBits","join","getErrorBit","positionError","slice","getShortErrorBit","notParityBits","errorBit","filter","getPositionError","binary","val","decimal","reverse","Index","onValueChange","Form","useForm","form","useState","setCheckBit","Header","className","style","padding","height","minHeight","layout","onFinish","dataBitInput","Item","label","name","rules","required","message","pattern","min","max","marginBottom","placeholder","onChange","e","target","value","initialValue","width","type","htmlType","React","collapsed","setCollapsed","Sider","id","collapsible","onCollapse","theme","defaultSelectedKeys","mode","marginTop","icon","PieChartOutlined","DesktopOutlined","margin","Footer","textAlign","Text","Typography","Content","Layout","setBit","errorPosition","setErrorPosition","data","useMemo","bitWithEvenParityBits","errorBitWithParityBits","shortErrorBit","errorParityBits","colData","columns","title","dataIndex","align","rows","key","errorColumns","strong","errorRows","defaultOptionsLottie","loop","autoplay","animationData","working","rendererSettings","preserveAspectRatio","Breadcrumb","options","bordered","dataSource","pagination","italic","display","gutter","span","orientation","s","p","plus","_","round","getFieldValue","validator","Promise","resolve","reject","Error","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12264049.chunk.js","sourcesContent":["class math {\n  calcCheckBit = (dataBit: string) => {\n    const len = dataBit.length;\n    if (!len) return -1;\n    for (let i = 0; i < 100; i++) {\n      if (Math.pow(2, i) - 1 >= len + i) return i;\n    }\n    return -1;\n  };\n\n  getArrayDataBit = (dataBit: string) => {\n    const len = dataBit.length;\n    const arr = [];\n    for (let i = 0; i < len; i++) {\n      arr[i] = dataBit[i];\n    }\n    return arr;\n  };\n\n  checkXORBit = (bit: string) => {\n    const len = bit.length;\n    let result = 0;\n    for (let i = 0; i < len; i++) {\n      result += parseInt(bit[i]);\n    }\n    return result % 2;\n  };\n\n  get2ExponentNumber = (number: number) => {\n    let result = 1;\n    for (let i = 1; i <= number; i++) {\n      result *= 2;\n    }\n    return result;\n  };\n\n  getExponentNumber = (number: number, exponent: number) => {\n    let result = 1;\n    for (let i = 1; i <= exponent; i++) {\n      result *= number;\n    }\n    return result;\n  };\n\n  getEquationResult = (dataBit: number, checkBit: number) => {\n    const resultLeft = this.get2ExponentNumber(checkBit) - 1;\n    const resultRight = dataBit + checkBit;\n    if (resultLeft >= resultRight) {\n      return 1;\n    }\n    return -1;\n  };\n\n  getBinaryNumber = (decimalNumber: number) => {\n    let result = decimalNumber.toString(2);\n    if (result.length < 4) {\n      let len = result.length;\n      let zero = \"\";\n      for (let i = len; i < 4; i++) {\n        zero += \"0\";\n      }\n      return zero + result;\n    }\n    return result;\n  };\n\n  getNumberArray = (number: number) => {\n    const arr = [];\n    for (let i = 1; i <= number; i++) {\n      arr[i - 1] = i;\n    }\n    return arr;\n  };\n\n  getBinaryNumberArray = (number: number) => {\n    const arr = [];\n    for (let i = 1; i <= number; i++) {\n      arr[i - 1] = this.getBinaryNumber(i);\n    }\n    return arr;\n  };\n\n  getPositionNumber1 = (binaryNumber: string) => {\n    const len = binaryNumber.length;\n    for (let i = 0; i < len; i++) {\n      if (binaryNumber[i] === \"1\") return i;\n    }\n    return -1;\n  };\n\n  checkPositionNumber1 = (binaryNumber: string, position: number) => {\n    if (binaryNumber[position] === \"1\") return position;\n    return -2;\n  };\n\n  getDataBitAndCheckBitArray = (number: number, dataBit: string) => {\n    const index = [];\n    const arr = [];\n    for (let i = 1; i <= number; i++) {\n      if (this.get2ExponentNumber(i - 1) <= number) {\n        index.push([this.get2ExponentNumber(i - 1)]);\n      }\n      arr[i - 1] = \"D\" + i;\n    }\n\n    index.forEach((i) => {\n      console.log(\"i: \", i);\n      arr[i[0] - 1] = null;\n    });\n\n    let x = 1;\n    const newArr: Array<any> = arr.map((i) => {\n      if (i !== null) return \"D\" + x++;\n      return i;\n    });\n\n    index.map((i) => {\n      const binaryNumber = this.getBinaryNumber(i[0]);\n      const positionNumber1 = this.getPositionNumber1(binaryNumber);\n      newArr.forEach((n, index) => {\n        if (\n          n !== null &&\n          positionNumber1 ===\n            this.checkPositionNumber1(\n              this.getBinaryNumber(index + 1),\n              positionNumber1\n            )\n        ) {\n          i.push(n);\n        }\n      });\n\n      return i;\n    });\n\n    console.log(\"index: \", index);\n\n    let positionBit = 0;\n    const result = [\n      [\n        ...newArr.map((i) => {\n          if (i !== null) return dataBit[positionBit++] + \" - \" + i;\n          return i;\n        }),\n      ],\n      [...index],\n    ];\n    return result;\n  };\n\n  getXORValue = (array: number[]) => {\n    let result = 0;\n    array.forEach((i, index) => {\n      if (index !== 0) result += i;\n    });\n    return result % 2;\n  };\n\n  calcCheckBitArray = (dataBit: (number[] | string[])[], bit: string) => {\n    const newArr = dataBit.map((item) =>\n      item.map((i: string | number) => {\n        if (typeof i !== \"number\") {\n          console.log(bit[parseInt(i.split(\"D\")[1]) - 1] + \" thuộc: \" + bit);\n          return parseInt(bit[parseInt(i.split(\"D\")[1]) - 1]);\n        } else {\n          console.log(\"vi tri: \", i);\n        }\n        return i;\n      })\n    );\n\n    const result = [\n      [...dataBit],\n      [...newArr],\n      [[...newArr.map((item) => this.getXORValue(item))]],\n    ];\n\n    return result;\n  };\n\n  getFullBit = (bit: string, oddParityBits: string[], parityBits: string) => {\n    let numBitInput = 0;\n    let numParityBits = 0;\n    const newOddParityBits = oddParityBits.map((i) => {\n      if (i !== null) return bit[numBitInput++];\n      return parityBits[numParityBits++];\n    });\n    return newOddParityBits.join(\"\");\n  };\n\n  getErrorBit = (bit: string, positionError: number) => {\n    const first = bit.slice(0, positionError - 1);\n    const mid = bit[positionError - 1] === \"1\" ? 0 : 1;\n    const last = bit.slice(positionError);\n    return first + mid + last;\n  };\n\n  getShortErrorBit = (notParityBits: (string | null)[], errorBit: string) => {\n    const result = notParityBits\n      .map((i, index) => {\n        if (i !== null) return errorBit[index];\n        return null;\n      })\n      .filter((i) => i !== null);\n\n    return result.join(\"\");\n  };\n\n  getPositionError = (bit: number[], errorBit: number[]) => {\n    const binary: number[] = [];\n    bit.forEach((i, index) => {\n      const val = i + errorBit[index];\n      binary.push(val > 1 ? 0 : val);\n    });\n    const decimal = parseInt(binary.reverse().join(\"\"), 2);\n    return { binary, decimal };\n  };\n}\n\nconst _math = new math();\n\nexport default _math;\n","import { Button, Form, Input, Layout } from \"antd\";\nimport React, { useState } from \"react\";\nimport { _math } from \"../../ultis\";\nimport \"./index.scss\";\n\ntype IData = {\n  dataBitInput: string;\n  dataBitOutput: string;\n};\n\ntype IProps = {\n  onValueChange: (dataBitInput: string) => void;\n};\n\nconst Index: React.FC<IProps> = ({ onValueChange }) => {\n  const [form] = Form.useForm<IData>();\n  const onFinish = ({ dataBitInput }: IData) => {\n    onValueChange(dataBitInput);\n  };\n\n  const [checkBit, setCheckBit] = useState(-1);\n\n  return (\n    <Layout.Header\n      className=\"site-layout-background\"\n      style={{ padding: 0, height: \"unset\", minHeight: 50 }}\n    >\n      <Form\n        form={form}\n        layout=\"inline\"\n        className=\"header-form\"\n        onFinish={onFinish}\n      >\n        <Form.Item\n          label=\"Từ mã\"\n          name=\"dataBitInput\"\n          rules={[\n            { required: true, message: \"Vui lòng nhập từ mã!\" },\n            {\n              pattern: /^[0-1]*$/,\n              message: \"Trường này chỉ được nhập 0 hoặc 1!\",\n            },\n            { min: 4, max: 8, message: \"Số lượng kí tự phải từ 4 đến 8!\" },\n          ]}\n          style={{ marginBottom: 0 }}\n        >\n          <Input\n            placeholder=\"VD: 0011001\"\n            onChange={(e) => setCheckBit(_math.calcCheckBit(e.target.value))}\n          />\n        </Form.Item>\n        <Form.Item\n          label=\"Số lượng bit chẵn lẻ\"\n          name=\"checkBit\"\n          initialValue={checkBit}\n        >\n          <p\n            className=\"ant-input ant-input-disabled\"\n            style={{ width: 100, height: 31.6 }}\n          >\n            {checkBit < 0 ? \"\" : checkBit}\n          </p>\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </Layout.Header>\n  );\n};\n\nexport default Index;\n","import React from \"react\";\nimport { Menu, Layout } from \"antd\";\nimport { DesktopOutlined, PieChartOutlined } from \"@ant-design/icons\";\nimport \"./index.scss\";\n\nconst Index: React.FC = () => {\n  const [collapsed, setCollapsed] = React.useState(false);\n  const onCollapsed = (collapsed: boolean) => {\n    setCollapsed(collapsed);\n  };\n\n  return (\n    <Layout.Sider\n      id=\"components-layout-demo-side\"\n      collapsible\n      collapsed={collapsed}\n      onCollapse={onCollapsed}\n    >\n      <div className=\"logo\" />\n      <Menu theme=\"dark\" defaultSelectedKeys={[\"1\"]} mode=\"inline\">\n        <Menu.Item style={{ marginTop: 0 }} key=\"1\" icon={<PieChartOutlined />}>\n          Thực hành\n        </Menu.Item>\n        <Menu.Item key=\"2\" icon={<DesktopOutlined />}>\n          Thuyết trình\n        </Menu.Item>\n      </Menu>\n    </Layout.Sider>\n  );\n};\n\nexport default Index;\n","import { Breadcrumb } from \"antd\";\nimport React from \"react\";\n\nconst Index: React.FC = () => {\n  return (\n    <Breadcrumb style={{ margin: \"16px 0\" }}>\n      <Breadcrumb.Item>Thực hành - Hamming Code</Breadcrumb.Item>\n    </Breadcrumb>\n  );\n};\n\nexport default Index;\n","import { Layout } from \"antd\";\nimport React from \"react\";\n\nconst Index: React.FC = () => {\n  return (\n    <Layout.Footer style={{ textAlign: \"center\" }}>\n      3T ©2021 Created by Tấn Tính\n    </Layout.Footer>\n  );\n};\n\nexport default Index;\n","/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable no-useless-computed-key */\n/* eslint-disable no-lone-blocks */\nimport {\n  Col,\n  Divider,\n  Layout,\n  Row,\n  Table,\n  Typography,\n  Form,\n  Input,\n  Button,\n} from \"antd\";\nimport { FC, useMemo, useState } from \"react\";\nimport { Breadcrumb, Footer, Header, Sider } from \"../../models\";\nimport { _math } from \"../../ultis\";\nimport Lottie from \"react-lottie\";\nimport working from \"../../assets/images/working.json\";\nimport \"./index.scss\";\n\nconst { useForm } = Form;\nconst { Text } = Typography;\nconst { Content } = Layout;\n\ntype IForm = {\n  errorPosition: string;\n};\n\nconst Index: FC = () => {\n  // calculate harming code\n  const [bit, setBit] = useState(\"\");\n  const [errorPosition, setErrorPosition] = useState(-1);\n  const [checkBit, setCheckBit] = useState(-1);\n\n  const onValueChange = (bit: string) => {\n    setBit(bit);\n    setCheckBit(_math.calcCheckBit(bit));\n    setErrorPosition(-1);\n  };\n\n  // get data bit and check bit, syndrome data, ...\n  const data = useMemo(\n    () => _math.getDataBitAndCheckBitArray(bit.length + checkBit, bit),\n    [bit.length + checkBit, bit]\n  );\n\n  const parityBits = useMemo(\n    () => _math.calcCheckBitArray(data[1], bit),\n    [data, bit]\n  );\n\n  const bitWithEvenParityBits = useMemo(\n    () => _math.getFullBit(bit, data[0], parityBits[2][0].join(\"\")),\n    [data, bit, parityBits]\n  );\n\n  const errorBitWithParityBits = useMemo(\n    () => _math.getErrorBit(bitWithEvenParityBits, errorPosition),\n    [bitWithEvenParityBits, errorPosition]\n  );\n\n  const shortErrorBit = useMemo(\n    () => _math.getShortErrorBit(data[0], errorBitWithParityBits),\n    [data[0], errorBitWithParityBits]\n  );\n\n  const errorParityBits = useMemo(\n    () => _math.calcCheckBitArray(data[1], shortErrorBit),\n    [data, shortErrorBit]\n  );\n\n  const positionError = useMemo(\n    () =>\n      _math.getPositionError(\n        parityBits[2][0] as number[],\n        errorParityBits[2][0] as number[]\n      ),\n    [parityBits[2][0], errorParityBits[2][0]]\n  );\n\n  // customize table\n  const colData = _math.getNumberArray(bit.length + checkBit);\n  const columns = [\n    {\n      title: \"Thứ tự bit\",\n      dataIndex: \"Thứ tự bit\",\n    },\n    ...colData.map((i, index) => {\n      return {\n        title: i,\n        dataIndex: index,\n        align: \"center\",\n      } as const;\n    }),\n  ];\n\n  const rows = [\n    {\n      key: \"1\",\n      [\"Thứ tự bit\"]: \"Nhị phân\",\n      ..._math.getBinaryNumberArray(bit.length + checkBit).map((i) => i),\n    },\n    {\n      key: \"2\",\n      [\"Thứ tự bit\"]: \"Nhóm dữ liệu (không có bit chẵn lẽ)\",\n      ...data[0].map((i) => i),\n    },\n    {\n      key: \"3\",\n      [\"Thứ tự bit\"]: \"Bit chẵn lẽ\",\n      ...data[0].map((i, index) => {\n        if (i !== null) return null;\n        return \"P\" + (index + 1);\n      }),\n    },\n  ];\n\n  const errorColumns = [\n    {\n      title: \"Thứ tự bit\",\n      dataIndex: \"Thứ tự bit\",\n    },\n    ...colData.map((i, index) => {\n      return {\n        title:\n          index === errorPosition - 1 ? (\n            <Text strong type=\"danger\">\n              {i}\n            </Text>\n          ) : (\n            i\n          ),\n        dataIndex: index,\n        align: \"center\",\n      } as const;\n    }),\n  ];\n\n  const errorRows = [\n    {\n      key: \"1\",\n      [\"Thứ tự bit\"]: \"Nhị phân\",\n      ..._math.getBinaryNumberArray(bit.length + checkBit).map((i) => i),\n    },\n    {\n      key: \"2\",\n      [\"Thứ tự bit\"]: \"Nhóm dữ liệu (không có bit chẵn lẽ)\",\n      ...data[0].map((i: string, index) => {\n        {\n          if (i !== null) {\n            let val = bitWithEvenParityBits[index];\n            if (index === errorPosition - 1) {\n              val = val === \"1\" ? \"0\" : \"1\";\n            }\n            return val + \" - \" + i.split(\" - \")[1];\n          }\n          return i;\n        }\n      }),\n    },\n    {\n      key: \"3\",\n      [\"Thứ tự bit\"]: \"Bit chẵn lẽ\",\n      ...data[0].map((i, index) => {\n        if (i !== null) return null;\n        return \"P\" + (index + 1);\n      }),\n    },\n  ];\n\n  // lottie\n  const defaultOptionsLottie = {\n    loop: true,\n    autoplay: true,\n    animationData: working,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n\n  // example 1 error in bit\n  const [form] = useForm<IForm>();\n  const onFinish = (data: IForm) => {\n    setErrorPosition(parseInt(data.errorPosition));\n  };\n\n  return (\n    <Layout style={{ minHeight: \"100vh\" }}>\n      <Sider />\n      <Layout className=\"site-layout\">\n        <Header onValueChange={onValueChange} />\n        <Content style={{ margin: \"0 16px\" }}>\n          <Breadcrumb />\n          <div\n            className=\"site-layout-background\"\n            style={{ padding: 24, height: \"100%\" }}\n          >\n            {(!bit.length ||\n              _math.getEquationResult(bit.length, checkBit) === -1) && (\n              <Lottie options={defaultOptionsLottie} width={600} height={400} />\n            )}\n            {bit.length > 0 &&\n              _math.getEquationResult(bit.length, checkBit) === 1 && (\n                <>\n                  <Table\n                    bordered\n                    columns={columns}\n                    dataSource={rows}\n                    pagination={false}\n                  />\n                  <Text\n                    strong\n                    italic\n                    style={{\n                      display: \"block\",\n                      textAlign: \"center\",\n                      marginTop: 8,\n                    }}\n                  >\n                    H1. Bảng phân tích\n                  </Text>\n                  <Row gutter={16}>\n                    <Col span={12} style={{ padding: \"12px 8px 0\" }}>\n                      <Divider orientation=\"left\">Tính K</Divider>\n                      <div>\n                        {[...parityBits[0]].map((i: any, index) => (\n                          <div key={index} style={{ marginTop: 8 }}>\n                            <span>P{i[0]} = </span>\n                            {[...i.slice(1)].map((s, p) => {\n                              let plus = \" + \";\n                              if (p === 0) plus = \"\";\n                              return <span key={p}>{plus + s}</span>;\n                            })}\n                            <span> = </span>\n                            {[...parityBits[1][index]].map((n, p) => {\n                              let plus = \" + \";\n                              if (p === 0) return null;\n                              else if (p === 1) plus = \"\";\n                              return <span key={p}> {plus + n}</span>;\n                            })}\n                            <span> = </span>\n                            <span>{parityBits[2][0][index]}</span>\n                          </div>\n                        ))}\n                        <div>\n                          <Text strong>\n                            {\"=>\"} K ={\" \"}\n                            {[...parityBits[0]].map((_, index) => (\n                              <span key={index}>\n                                {\n                                  parityBits[2][0][\n                                    parityBits[0].length - 1 - index\n                                  ]\n                                }\n                              </span>\n                            ))}\n                          </Text>\n                        </div>\n                        <div>\n                          <Text>\n                            Như vậy, ta có nhóm dữ liệu mới bao gồm các bit chẵn\n                            lẻ là <b>{bitWithEvenParityBits}</b>\n                          </Text>\n                        </div>\n                      </div>\n                    </Col>\n                    <Col span={12} style={{ padding: \"12px 8px 0\" }}>\n                      <Divider orientation=\"left\">\n                        Giả sử có 1 bit sai ({shortErrorBit})\n                      </Divider>\n                      <Text>\n                        Từ nhóm dữ liệu bao gồm các bit chẵn lẽ có 1 bit sai tại\n                        vị trí\n                      </Text>\n                      <Form\n                        form={form}\n                        layout=\"inline\"\n                        className=\"header-form\"\n                        onFinish={onFinish}\n                        style={{ height: \"auto\" }}\n                      >\n                        <Form.Item\n                          label=\"Vị trí sai\"\n                          name=\"errorPosition\"\n                          rules={[\n                            {\n                              required: true,\n                              message: \"Vui lòng nhập vị trí sai!\",\n                            },\n                            {\n                              pattern: /^[0-9]*$/,\n                              message: \"Trường này chỉ được nhập số!\",\n                            },\n                            {\n                              min: 1,\n                              max: (bit.length + checkBit).toString().length,\n                              message:\n                                \"Số lượng kí tự được cho phép là \" +\n                                Math.round((bit.length + checkBit) / 10),\n                            },\n                            ({ getFieldValue }) => ({\n                              validator(_, value) {\n                                if (\n                                  !value ||\n                                  (value > 0 && value <= colData.length)\n                                ) {\n                                  return Promise.resolve();\n                                }\n                                return Promise.reject(\n                                  new Error(\n                                    \"Chỉ được nhập các số từ 1 - \" +\n                                      colData.length\n                                  )\n                                );\n                              },\n                            }),\n                          ]}\n                          style={{ marginBottom: 0 }}\n                        >\n                          <Input placeholder=\"VD: 10111001\" />\n                        </Form.Item>\n                        <Form.Item>\n                          <Button type=\"primary\" htmlType=\"submit\">\n                            Submit\n                          </Button>\n                        </Form.Item>\n                      </Form>\n                      {errorPosition > 0 && (\n                        <>\n                          <div>\n                            <Text strong italic>\n                              * Cách thay đổi bit có 1 vị trí sai. Nếu vị trí đó\n                              là 1 thì đổi thành 0 và ngược lại.\n                            </Text>\n                          </div>\n                          <div>\n                            <Text>\n                              Thay đổi <b>{bitWithEvenParityBits}</b> có{\" \"}\n                              <b>vị trí sai là {errorPosition}</b> thành{\" \"}\n                              <b>{errorBitWithParityBits}</b>\n                            </Text>\n                          </div>\n                        </>\n                      )}\n                    </Col>\n                  </Row>\n                </>\n              )}\n            {errorPosition > 0 && (\n              <div style={{ marginTop: 30 }}>\n                <Divider>Sửa sai</Divider>\n                <Table\n                  bordered\n                  columns={errorColumns}\n                  dataSource={errorRows}\n                  pagination={false}\n                />\n                <Text\n                  strong\n                  italic\n                  style={{\n                    display: \"block\",\n                    textAlign: \"center\",\n                    marginTop: 8,\n                  }}\n                >\n                  H2. Bảng phân tích\n                </Text>\n                <Row gutter={16}>\n                  <Col span={12} style={{ padding: \"12px 8px 0\" }}>\n                    <Divider orientation=\"left\">Tính K'</Divider>\n                    <div>\n                      {[...errorParityBits[0]].map((i: any, index) => (\n                        <div key={index} style={{ marginTop: 8 }}>\n                          <span>P{i[0]} = </span>\n                          {[...i.slice(1)].map((s, p) => {\n                            let plus = \" + \";\n                            if (p === 0) plus = \"\";\n                            return <span key={p}>{plus + s}</span>;\n                          })}\n                          <span> = </span>\n                          {[...errorParityBits[1][index]].map((n, p) => {\n                            let plus = \" + \";\n                            if (p === 0) return null;\n                            else if (p === 1) plus = \"\";\n                            return <span key={p}> {plus + n}</span>;\n                          })}\n                          <span> = </span>\n                          <span>{errorParityBits[2][0][index]}</span>\n                        </div>\n                      ))}\n                      <div>\n                        <Text strong>\n                          {\"=>\"} K' ={\" \"}\n                          {[...errorParityBits[0]].map((_, index) => (\n                            <span key={index}>\n                              {\n                                errorParityBits[2][0][\n                                  errorParityBits[0].length - 1 - index\n                                ]\n                              }\n                            </span>\n                          ))}\n                        </Text>\n                      </div>\n                      <div>\n                        <Text>\n                          Như vậy, ta có nhóm dữ liệu mới bao gồm các bit chẵn\n                          lẻ là <b>{errorBitWithParityBits}</b>\n                        </Text>\n                      </div>\n                    </div>\n                  </Col>\n                  <Col span={12} style={{ padding: \"12px 8px 0\" }}>\n                    <Divider orientation=\"left\">Tìm lỗi</Divider>\n                    <div>\n                      <Text>\n                        Ta có K + K' ={\" \"}\n                        {[...(parityBits[2][0] as number[])].reverse()} +{\" \"}\n                        {[...(errorParityBits[2][0] as number[])].reverse()} ={\" \"}\n                        {positionError.binary} (Nhị phân) ={\" \"}\n                        {positionError.decimal} (Thập phân)\n                      </Text>\n                    </div>\n                    <div>\n                      {positionError.decimal > 0 && (\n                        <Text strong type=\"danger\">\n                          {\"=>\"} Lỗi ngay tại vị trí số {positionError.decimal}.\n                          Như vậy kết quả cuối cùng thu được là thay đổi{\" \"}\n                          <b>{errorBitWithParityBits}</b> có{\" \"}\n                          <b>vị trí sai là {positionError.decimal}</b> thành{\" \"}\n                          <b>{bitWithEvenParityBits}</b>\n                        </Text>\n                      )}\n                      {positionError.decimal === 0 && (\n                        <Text strong type=\"success\">\n                          {\"=>\"} Không có bất kỳ lỗi nào\n                        </Text>\n                      )}\n                    </div>\n                  </Col>\n                </Row>\n              </div>\n            )}\n          </div>\n        </Content>\n        <Footer />\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default Index;\n","import \"antd/dist/antd.css\";\nimport React from \"react\";\nimport { Exercise } from \"./routes\";\n\nconst App: React.FC = () => {\n  return <Exercise />;\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}