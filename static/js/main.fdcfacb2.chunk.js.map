{"version":3,"sources":["ultis/Math.ts","models/Header/index.tsx","models/Sider/index.tsx","models/Breadcrumb/index.tsx","models/Footer/index.tsx","routes/Exercise/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["_math","calcCheckBit","dataBit","len","length","i","Math","pow","getArrayDataBit","arr","checkXORBit","bit","result","parseInt","get2ExponentNumber","number","getExponentNumber","exponent","getEquationResult","checkBit","console","log","getBinaryNumber","decimalNumber","toString","zero","getNumberArray","getBinaryNumberArray","getPositionNumber1","binaryNumber","checkPositionNumber1","position","getDataBitAndCheckBitArray","index","push","forEach","x","newArr","map","positionNumber1","n","reverse","getXORValue","array","calcCheckBitArray","bitLen","slice","s","item","getSyndrome","checkBitArray1","checkBitArray2","syndrome","val","join","Index","onValueChange","Form","useForm","form","useState","setCheckBit","Header","className","style","padding","height","minHeight","layout","onFinish","dataBitInput","dataBitOutput","Item","label","name","rules","required","message","pattern","min","max","marginBottom","placeholder","onChange","e","target","value","getFieldValue","validator","_","Promise","reject","Error","resolve","initialValue","width","type","htmlType","React","collapsed","setCollapsed","Sider","id","collapsible","onCollapse","theme","defaultSelectedKeys","mode","marginTop","icon","PieChartOutlined","DesktopOutlined","margin","Footer","textAlign","Text","Typography","Content","Layout","setDataBitInput","setDataBitOutput","_XORDataBit","useMemo","data","checkBitInput","checkBitOutput","columns","title","dataIndex","align","rows","key","defaultOptionsLottie","loop","autoplay","animationData","working","rendererSettings","preserveAspectRatio","Breadcrumb","options","bordered","dataSource","pagination","strong","italic","display","gutter","span","orientation","flexDirection","p","plus","direction","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fdcfacb2.chunk.js","sourcesContent":["class math {\n  calcCheckBit = (dataBit: string) => {\n    const len = dataBit.length;\n    if (!len) return -1;\n    for (let i = 0; i < 100; i++) {\n      if (Math.pow(2, i) - 1 >= len + i) return i;\n    }\n    return -1;\n  };\n\n  getArrayDataBit = (dataBit: string) => {\n    const len = dataBit.length;\n    const arr = [];\n    for (let i = 0; i < len; i++) {\n      arr[i] = dataBit[i];\n    }\n    return arr;\n  };\n\n  checkXORBit = (bit: string) => {\n    const len = bit.length;\n    let result = 0;\n    for (let i = 0; i < len; i++) {\n      result += parseInt(bit[i]);\n    }\n    return result % 2;\n  };\n\n  get2ExponentNumber = (number: number) => {\n    let result = 1;\n    for (let i = 1; i <= number; i++) {\n      result *= 2;\n    }\n    return result;\n  };\n\n  getExponentNumber = (number: number, exponent: number) => {\n    let result = 1;\n    for (let i = 1; i <= exponent; i++) {\n      result *= number;\n    }\n    return result;\n  };\n\n  getEquationResult = (dataBit: number, checkBit: number) => {\n    console.log(\"dataBit: \", dataBit);\n    const resultLeft = this.get2ExponentNumber(checkBit) - 1;\n    const resultRight = dataBit + checkBit;\n    if (resultLeft >= resultRight) {\n      return 1;\n    }\n    return -1;\n  };\n\n  getBinaryNumber = (decimalNumber: number) => {\n    let result = decimalNumber.toString(2);\n    if (result.length < 4) {\n      let len = result.length;\n      let zero = \"\";\n      for (let i = len; i < 4; i++) {\n        zero += \"0\";\n      }\n      return zero + result;\n    }\n    return result;\n  };\n\n  getNumberArray = (number: number) => {\n    const arr = [];\n    for (let i = 1; i <= number; i++) {\n      arr[number - i] = i;\n    }\n    return arr;\n  };\n\n  getBinaryNumberArray = (number: number) => {\n    const arr = [];\n    for (let i = 1; i <= number; i++) {\n      arr[number - i] = this.getBinaryNumber(i);\n    }\n    return arr;\n  };\n\n  getPositionNumber1 = (binaryNumber: string) => {\n    const len = binaryNumber.length;\n    for (let i = 0; i < len; i++) {\n      if (binaryNumber[i] === \"1\") return i;\n    }\n    return -1;\n  };\n\n  checkPositionNumber1 = (binaryNumber: string, position: number) => {\n    if (binaryNumber[position] === \"1\") return position;\n    return -2;\n  };\n\n  getDataBitAndCheckBitArray = (number: number) => {\n    const index = [];\n    const arr = [];\n    for (let i = 1; i <= number; i++) {\n      if (this.get2ExponentNumber(i - 1) <= number) {\n        index.push([this.get2ExponentNumber(i - 1)]);\n      }\n      arr[i - 1] = \"D\" + i;\n    }\n\n    index.forEach((i) => (arr[i[0] - 1] = null));\n\n    let x = 1;\n    const newArr: Array<any> = arr.map((i) => {\n      if (i !== null) return \"D\" + x++;\n      return i;\n    });\n\n    index.map((i) => {\n      const binaryNumber = this.getBinaryNumber(i[0]);\n      const positionNumber1 = this.getPositionNumber1(binaryNumber);\n      newArr.forEach((n, index) => {\n        if (\n          n !== null &&\n          positionNumber1 ===\n            this.checkPositionNumber1(\n              this.getBinaryNumber(index + 1),\n              positionNumber1\n            )\n        ) {\n          i.push(n);\n        }\n      });\n\n      return i;\n    });\n\n    return [[...newArr.reverse()], [...index]];\n  };\n\n  getXORValue = (array: number[]) => {\n    let result = 0;\n    array.forEach((i) => (result += i));\n    return result % 2;\n  };\n\n  calcCheckBitArray = (dataBit: (number[] | string[])[], bit: string) => {\n    const bitLen = bit.length;\n    const newArr = dataBit.map((i) =>\n      i.slice(1).map((s: any) => parseInt(bit[bitLen - parseInt(s?.slice(1))]))\n    );\n\n    return [\n      [...dataBit],\n      [...newArr],\n      [[...newArr.map((item) => this.getXORValue(item))]],\n    ];\n  };\n\n  getSyndrome = (\n    checkBitArray1: Array<number>,\n    checkBitArray2: Array<number>\n  ) => {\n    const syndrome: string[] = [];\n    checkBitArray1.forEach((i, index) => {\n      const val = i + checkBitArray2[index] > 1 ? 0 : i + checkBitArray2[index];\n      syndrome[index] = val.toString();\n    });\n\n    const result = [[...syndrome.reverse()], parseInt(syndrome.join(\"\"), 2)];\n    console.log(\"result: \", result);\n\n    return result;\n  };\n}\n\nconst _math = new math();\n\nexport default _math;\n","import { Button, Form, Input, Layout } from \"antd\";\nimport React, { useState } from \"react\";\nimport { _math } from \"../../ultis\";\nimport \"./index.scss\";\n\ntype IData = {\n  dataBitInput: string;\n  dataBitOutput: string;\n};\n\ntype IProps = {\n  onValueChange: (dataBitInput: string, dataBitOutput: string) => void;\n};\n\nconst Index: React.FC<IProps> = ({ onValueChange }) => {\n  const [form] = Form.useForm<IData>();\n  const onFinish = ({ dataBitInput, dataBitOutput }: IData) => {\n    onValueChange(dataBitInput, dataBitOutput);\n  };\n\n  const [checkBit, setCheckBit] = useState(-1);\n\n  return (\n    <Layout.Header\n      className=\"site-layout-background\"\n      style={{ padding: 0, height: \"unset\", minHeight: 50 }}\n    >\n      <Form\n        form={form}\n        layout=\"inline\"\n        className=\"header-form\"\n        onFinish={onFinish}\n      >\n        <Form.Item\n          label=\"Bit data đầu vào (P)\"\n          name=\"dataBitInput\"\n          rules={[\n            { required: true, message: \"Vui lòng nhập bit data đầu vào!\" },\n            {\n              pattern: /^[0-1]*$/,\n              message: \"Trường này chỉ được nhập 0 hoặc 1!\",\n            },\n            { min: 4, max: 8, message: \"Số lượng kí tự phải từ 4 đến 8!\" },\n          ]}\n          style={{ marginBottom: 0 }}\n        >\n          <Input\n            placeholder=\"VD: 10111001\"\n            onChange={(e) => setCheckBit(_math.calcCheckBit(e.target.value))}\n          />\n        </Form.Item>\n        <Form.Item\n          label=\"Bit data đầu ra\"\n          name=\"dataBitOutput\"\n          rules={[\n            {\n              required: true,\n              message: \"Vui lòng nhập bit data đầu ra!\",\n            },\n            {\n              pattern: /^[0-1]*$/,\n              message: \"Trường này chỉ được nhập 0 hoặc 1!\",\n            },\n            ({ getFieldValue }) => ({\n              validator(_, value) {\n                if (\n                  !value ||\n                  getFieldValue(\"dataBitInput\")?.length === value?.length\n                ) {\n                  return Promise.resolve();\n                } else if (!getFieldValue(\"dataBitInput\")?.length) {\n                  return Promise.reject(\n                    new Error(\"Vui lòng nhập bit data đầu vào trước!\")\n                  );\n                } else {\n                  return Promise.reject(\n                    new Error(\"Phải cùng độ dài bit data đầu vào!\")\n                  );\n                }\n              },\n            }),\n          ]}\n          style={{ marginBottom: 0 }}\n        >\n          <Input placeholder=\"VD: 10111001\" />\n        </Form.Item>\n        <Form.Item label=\"Check bit\" name=\"checkBit\" initialValue={checkBit}>\n          <p\n            className=\"ant-input ant-input-disabled\"\n            style={{ width: 100, height: 31.6 }}\n          >\n            {checkBit < 0 ? \"\" : checkBit}\n          </p>\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </Layout.Header>\n  );\n};\n\nexport default Index;\n","import React from \"react\";\nimport { Menu, Layout } from \"antd\";\nimport { DesktopOutlined, PieChartOutlined } from \"@ant-design/icons\";\nimport \"./index.scss\";\n\nconst Index: React.FC = () => {\n  const [collapsed, setCollapsed] = React.useState(false);\n  const onCollapsed = (collapsed: boolean) => {\n    setCollapsed(collapsed);\n  };\n\n  return (\n    <Layout.Sider\n      id=\"components-layout-demo-side\"\n      collapsible\n      collapsed={collapsed}\n      onCollapse={onCollapsed}\n    >\n      <div className=\"logo\" />\n      <Menu theme=\"dark\" defaultSelectedKeys={[\"1\"]} mode=\"inline\">\n        <Menu.Item style={{ marginTop: 0 }} key=\"1\" icon={<PieChartOutlined />}>\n          Thực hành\n        </Menu.Item>\n        <Menu.Item key=\"2\" icon={<DesktopOutlined />}>\n          Thuyết trình\n        </Menu.Item>\n      </Menu>\n    </Layout.Sider>\n  );\n};\n\nexport default Index;\n","import { Breadcrumb } from \"antd\";\nimport React from \"react\";\n\nconst Index: React.FC = () => {\n  return (\n    <Breadcrumb style={{ margin: \"16px 0\" }}>\n      <Breadcrumb.Item>Thực hành - Hamming Code</Breadcrumb.Item>\n    </Breadcrumb>\n  );\n};\n\nexport default Index;\n","import { Layout } from \"antd\";\nimport React from \"react\";\n\nconst Index: React.FC = () => {\n  return (\n    <Layout.Footer style={{ textAlign: \"center\" }}>\n      3T ©2021 Created by Tấn Tính\n    </Layout.Footer>\n  );\n};\n\nexport default Index;\n","import { Col, Divider, Layout, Row, Space, Table, Typography } from \"antd\";\nimport React, { FC, useEffect, useMemo, useState } from \"react\";\nimport { Breadcrumb, Footer, Header, Sider } from \"../../models\";\nimport { _math } from \"../../ultis\";\nimport Lottie from \"react-lottie\";\nimport working from \"../../assets/images/working.json\";\nimport \"./index.scss\";\n\nconst { Text } = Typography;\nconst { Content } = Layout;\n\nconst Index: FC = () => {\n  // calculate harming code\n  const [dataBitInput, setDataBitInput] = useState(\"\");\n  const [dataBitOutput, setDataBitOutput] = useState(\"\");\n  const [checkBit, setCheckBit] = useState(-1);\n\n  const onValueChange = (dataBitInput: string, dataBitOutput: string) => {\n    setDataBitInput(dataBitInput);\n    setDataBitOutput(dataBitOutput);\n    setCheckBit(_math.calcCheckBit(dataBitInput));\n  };\n\n  // get data bit and check bit, syndrome data, ...\n  const _XORDataBit = useMemo(\n    () => _math.checkXORBit(dataBitInput),\n    [dataBitInput]\n  );\n\n  const data = useMemo(\n    () => _math.getDataBitAndCheckBitArray(dataBitInput.length + checkBit),\n    [dataBitInput.length + checkBit]\n  );\n\n  const checkBitInput = useMemo(\n    () => _math.calcCheckBitArray(data[1], dataBitInput),\n    [data[1], dataBitInput]\n  );\n\n  const checkBitOutput = useMemo(\n    () => _math.calcCheckBitArray(data[1], dataBitOutput),\n    [data[1], dataBitOutput]\n  );\n\n  const syndrome = useMemo(\n    () =>\n      _math.getSyndrome(\n        checkBitInput[2][0] as number[],\n        checkBitOutput[2][0] as number[]\n      ),\n    [checkBitInput[2][0], checkBitOutput[2][0]]\n  );\n\n  // customize table\n  const columns = [\n    {\n      title: \"Bit position\",\n      dataIndex: \"Bit position\",\n    },\n    ..._math.getNumberArray(dataBitInput.length + checkBit).map((i, index) => {\n      return {\n        title: i,\n        dataIndex: index,\n        align: \"center\",\n      } as const;\n    }),\n  ];\n\n  const rows = [\n    {\n      key: \"1\",\n      [\"Bit position\"]: \"Position number\",\n      ..._math\n        .getBinaryNumberArray(dataBitInput.length + checkBit)\n        .map((i) => i),\n    },\n    {\n      key: \"2\",\n      [\"Bit position\"]: \"Data bit\",\n      ...data[0].map((i) => i),\n    },\n    {\n      key: \"3\",\n      [\"Bit position\"]: \"Check bit\",\n      ...data[0].map((i, index) => {\n        if (i !== null) return null;\n        return \"C\" + (dataBitInput.length + checkBit - index);\n      }),\n    },\n  ];\n\n  // lottie\n  const defaultOptionsLottie = {\n    loop: true,\n    autoplay: true,\n    animationData: working,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n\n  return (\n    <Layout style={{ minHeight: \"100vh\" }}>\n      <Sider />\n      <Layout className=\"site-layout\">\n        <Header onValueChange={onValueChange} />\n        <Content style={{ margin: \"0 16px\" }}>\n          <Breadcrumb />\n          <div\n            className=\"site-layout-background\"\n            style={{ padding: 24, height: \"100%\" }}\n          >\n            {(!dataBitInput.length ||\n              _math.getEquationResult(dataBitInput.length, checkBit) ===\n                -1) && (\n              <Lottie options={defaultOptionsLottie} width={600} height={400} />\n            )}\n            {dataBitInput.length > 0 &&\n              _math.getEquationResult(dataBitInput.length, checkBit) === 1 && (\n                <>\n                  <Table\n                    bordered\n                    columns={columns}\n                    dataSource={rows}\n                    pagination={false}\n                  />\n                  <Text\n                    strong\n                    italic\n                    style={{\n                      display: \"block\",\n                      textAlign: \"center\",\n                      marginTop: 8,\n                    }}\n                  >\n                    H1. Bảng phân tích\n                  </Text>\n                  <Row gutter={16}>\n                    <Col span={8} style={{ padding: \"12px 8px 0\" }}>\n                      <Divider orientation=\"left\">\n                        Tính K bit đầu vào ({dataBitInput})\n                      </Divider>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"column-reverse\",\n                        }}\n                      >\n                        {[...checkBitInput[0]].map((i: any, index) => (\n                          <div key={index} style={{ marginTop: 8 }}>\n                            <span>C{i[0]} = </span>\n                            {[...i.slice(1)].map((s, p) => {\n                              let plus = \" + \";\n                              if (p === 0) plus = \"\";\n                              return <span key={p}>{plus + s}</span>;\n                            })}\n                            <span> = </span>\n                            {[...checkBitInput[1][index]].map((n, p) => {\n                              let plus = \" + \";\n                              if (p === 0) plus = \"\";\n                              return <span key={p}> {plus + n}</span>;\n                            })}\n                            <span> = </span>\n                            <span>{checkBitInput[2][0][index]}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </Col>\n                    <Col span={8} style={{ padding: \"12px 8px 0\" }}>\n                      <Divider orientation=\"left\">\n                        Tính K' bit đầu ra ({dataBitOutput})\n                      </Divider>\n                      {dataBitOutput.length === dataBitInput.length && (\n                        <div\n                          style={{\n                            display: \"flex\",\n                            flexDirection: \"column-reverse\",\n                          }}\n                        >\n                          {[...checkBitOutput[0]].map((i: any, index) => (\n                            <div key={index} style={{ marginTop: 8 }}>\n                              <span>C{i[0]} = </span>\n                              {[...i.slice(1)].map((s, p) => {\n                                let plus = \" + \";\n                                if (p === 0) plus = \"\";\n                                return <span key={p}>{plus + s}</span>;\n                              })}\n                              <span> = </span>\n                              {[...checkBitOutput[1][index]].map((n, p) => {\n                                let plus = \" + \";\n                                if (p === 0) plus = \"\";\n                                return <span key={p}> {plus + n}</span>;\n                              })}\n                              <span> = </span>\n                              <span>{checkBitOutput[2][0][index]}</span>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </Col>\n                    <Col span={8} style={{ padding: \"12px 8px 0\" }}>\n                      <Divider orientation=\"left\">Kết quả syndrome</Divider>\n                      <div\n                        style={{\n                          marginTop: 8,\n                          display: \"inline-flex\",\n                          flexDirection: \"column\",\n                        }}\n                      >\n                        <div>\n                          <span style={{ margin: \"0px 10px\" }}>K: </span>\n                          {checkBitInput[2][0]\n                            .reverse()\n                            .map((i: any, index: number) => (\n                              <span key={index} style={{ margin: \"0px 10px\" }}>\n                                {i}\n                              </span>\n                            ))}\n                        </div>\n                        <div>\n                          <span style={{ margin: \"0px 7.5px 0px 10px\" }}>\n                            K':{\" \"}\n                          </span>\n                          {checkBitOutput[2][0]\n                            .reverse()\n                            .map((i: any, index: number) => (\n                              <span key={index} style={{ margin: \"0px 10px\" }}>\n                                {i}\n                              </span>\n                            ))}\n                        </div>\n                        <Divider style={{ margin: \"8px 0\" }} />\n                        <div>\n                          <span style={{ margin: \"0px 10px\" }}>C: </span>\n                          {[...(syndrome[0] as string[])].map((i, index) => (\n                            <span key={index} style={{ margin: \"0px 10px\" }}>\n                              {i}\n                            </span>\n                          ))}\n                          {_XORDataBit === 1 && (syndrome[1] as number) !== 0 && (\n                            <Text strong type=\"danger\">\n                              {\" \"}\n                              {`=> Phát hiện lỗi tại vị trí: ${syndrome[1]} (D${\n                                (syndrome[1] as number) - checkBit\n                              })`}\n                            </Text>\n                          )}\n                          {_XORDataBit === 0 && (syndrome[1] as number) === 0 && (\n                            <Text strong type=\"success\">\n                              {\" \"}\n                              {`=> Không có lỗi`}\n                            </Text>\n                          )}\n                          {_XORDataBit === 0 && (syndrome[1] as number) !== 0 && (\n                            <Text strong type=\"danger\">\n                              {\" \"}\n                              {`=> Có từ 2 lỗi trở lên`}\n                            </Text>\n                          )}\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                  <div>\n                    <Row gutter={16}>\n                      <Col span={12}>\n                        <Divider orientation=\"center\">Giải thích</Divider>\n                        <Space direction=\"vertical\">\n                          <Text italic>\n                            - Điều kiện 1: C = 0 và P = 0, không có lỗi nào{\" \"}\n                            {_XORDataBit === 0 &&\n                              (syndrome[1] as number) === 0 && <b>(Thỏa)</b>}\n                          </Text>\n                          {_XORDataBit === 0 && (syndrome[1] as number) === 0 && (\n                            <div className=\"result\">\n                              <Text>{`Vì: C = ${syndrome[1]} và P = `}</Text>\n                              {[..._math.getArrayDataBit(dataBitInput)].map(\n                                (i, index) => {\n                                  if (index === 0)\n                                    return <Text> {`${i} `}</Text>;\n                                  return <Text> {`+ ${i} `}</Text>;\n                                }\n                              )}\n                              <Text>{`= ${_XORDataBit}`}</Text>\n                            </div>\n                          )}\n                          <Text italic>\n                            - Điều kiện 2: C ≥ 0 và P = 1, Phát hiện 1 lỗi, có\n                            thể sửa lỗi{\" \"}\n                            {_XORDataBit === 1 &&\n                              (syndrome[1] as number) !== 0 && <b>(Thỏa)</b>}\n                          </Text>\n                          {_XORDataBit === 1 && (syndrome[1] as number) !== 0 && (\n                            <div className=\"result\">\n                              <Text>{`Vì: C = ${syndrome[1]} và P = `}</Text>\n                              {[..._math.getArrayDataBit(dataBitInput)].map(\n                                (i, index) => {\n                                  if (index === 0)\n                                    return <Text> {`${i} `}</Text>;\n                                  return <Text> {`+ ${i} `}</Text>;\n                                }\n                              )}\n                              <Text>{`= ${_XORDataBit}`}</Text>\n                            </div>\n                          )}\n                          <Text italic>\n                            - Điều kiện 3: C ≠ 0 và P = 0, Phát hiện 2 lỗi trở\n                            lên, không thể sửa lỗi{\" \"}\n                            {_XORDataBit === 0 &&\n                              (syndrome[1] as number) !== 0 && <b>(Thoả)</b>}\n                          </Text>\n                          {_XORDataBit === 0 && (syndrome[1] as number) !== 0 && (\n                            <div className=\"result\">\n                              <Text>{`Vì: C = ${syndrome[1]} và P = `}</Text>\n                              {[..._math.getArrayDataBit(dataBitInput)].map(\n                                (i, index) => {\n                                  if (index === 0)\n                                    return <Text> {`${i} `}</Text>;\n                                  return <Text> {`+ ${i} `}</Text>;\n                                }\n                              )}\n                              <Text>{`= ${_XORDataBit}`}</Text>\n                            </div>\n                          )}\n                        </Space>\n                      </Col>\n                      <Col span={12}>\n                        <Divider orientation=\"center\">Sửa lỗi</Divider>\n                        {_XORDataBit === 0 && (syndrome[1] as number) === 0 && (\n                          <Text italic>\n                            - Thuộc điều kiện 1 nên không có lỗi để sửa\n                          </Text>\n                        )}\n                        {_XORDataBit === 1 && (syndrome[1] as number) !== 0 && (\n                          <Text italic>\n                            - Thuộc điều kiện 2 nên đổi data bit đầu vào có vị\n                            trí sai từ 1 - 0 hoặc ngược lại\n                          </Text>\n                        )}\n                        {_XORDataBit === 0 && (syndrome[1] as number) !== 0 && (\n                          <Text italic>\n                            - Thuộc điều kiện 3 nên không thể sửa lỗi\n                          </Text>\n                        )}\n                      </Col>\n                    </Row>\n                  </div>\n                </>\n              )}\n          </div>\n        </Content>\n        <Footer />\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default Index;\n","import \"antd/dist/antd.css\";\nimport React from \"react\";\nimport { Exercise } from \"./routes\";\n\nconst App: React.FC = () => {\n  return <Exercise />;\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}